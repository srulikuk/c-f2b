#!/bin/bash

# Script to get list of open ports from iptables

# IMPORTANT: This will NOT work for all machines as the output of iptables
# is not formatted exactly the same and will not work if you
# use an exclude rule to open ports (such as " ! --dport <ports>")
# contribtions for a script that gets a list of all open ports is very welcome

# This script ONLY works when using ACCEPT rules to open ports
# If your rules for open ports are "REJECT ! <port>" do not use this
# Its important to run this as soon as a new port is opened else your
# ip will get banned by faile2ban as soon as it tries to connect to
# the now port.

# I dont know of a iptables wrapper to run this each time a rule is added/removed

#set cottect interfce per machine
read -p 'Check and update eth interface name before running the script
ENTER to continue CTRL+C to cancel' -n1 s
interface="ens2"
# Get the open ports from iptables

# Add iptables rule function
add_rules()
{
		# if only 1 port the rule uses different paramaters
		if [[ "$ports" == *","* ]] ; then
				port_param='-m multiport ! --dports'
  	else
  			port_param='! --dport'
  	fi

		iptables -A INPUT -i $interface -m state --state NEW -p $proto $port_param $ports -j \
LOG --log-prefix "Probe on closed port: " --log-level 4 -m comment --comment \
"RULE # $((rulenum++)) of $total_rules port probing LOG excluding -> $ports"
}

# TCP ports
mapfile -t tcp_list < <(iptables -L INPUT | grep "tcp dpt" | grep -v "LOG" | sed 's/.*dpts\{0,1\}://')
# UDP ports
mapfile -t udp_list < <(iptables -L INPUT | grep "udp dpt" | grep -v "LOG" | sed 's/.*dpts\{0,1\}://')

#TODO: Add functionality for NAT table_hostname

# Set some vars for the iptables rule comments
rulenum=1 # Rule # for the iptables comment
tcp_rules=$(awk -v v1=${#tcp_list[@]} 'BEGIN {print int(0.99999 + v1/15)}')
udp_rules=$(awk -v v1=${#udp_list[@]} 'BEGIN {print int(0.99999 + v1/15)}')
total_rules=$((tcp_rules+udp_rules))

# Delete old rules - This is important in case of opening a new port, logging for that port should be removed
#mapfile -t existing_rules < <(iptables -L INPUT --line-numbers | grep "Probe on closed port:" | awk '{print $1}')
num_of_rules=$(iptables -L INPUT --line-numbers | grep "Probe on closed port:" | wc -l)
for i in $(seq 1 $num_of_rules) ; do
		rule_num=$(iptables -L INPUT --line-numbers | grep "Probe on closed port:" | tail -n 1 | awk '{print $1}')
#for rule in "${existing_rules[@]}" ; do
		iptables -D INPUT $rule_num
done

# TCP Rules
proto='tcp'
for (( x = 0; x < ${#tcp_list[@]}; x += 15 )); do
# iptables allows max 15 ports per tule so split it
		ports=$(echo ${tcp_list[*]:x:15} | tr ' ' ',' | sed 's/,$//')
		add_rules
done

# UDP Rules
proto='udp'
for (( x = 0; x < ${#udp_list[@]}; x += 15 )); do
		ports=$(echo ${udp_list[*]:x:15} | tr ' ' ',' | sed 's/,$//')
		add_rules
done
